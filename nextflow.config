// ---------------------------------------------- //
// SSDS Nextflow pipeline default config file     //
// ---------------------------------------------- //
// Load resources configuration
includeConfig 'conf/resources.config'

// Default config options for all environments.

params {
	//PIPELINE DEPENDANCIES
	name = "SSDSnextflowPipeline"
	inputcsv = "${baseDir}/tests/fastq/input.csv"
	outdir = "${baseDir}/${params.name}.outdir"
	src = "${baseDir}/accessoryFiles/SSDS/scripts"
	scratch = "${params.outdir}/scratch"
	chrsize = "${baseDir}/accessoryFiles/SSDS/mm10/mm10.chrom.sizes"
	trimmomatic_adapters = "${baseDir}/TruSeq2-PE.fa"
	multiqc_configfile = "${baseDir}/multiqc_config.yaml"
	custom_bwa = "${baseDir}/accessoryFiles/SSDS/bwa_0.7.12"
	custom_bwa_ra = "${baseDir}/accessoryFiles/SSDS/bwa_ra_0.7.12"
	hotspots = "${baseDir}/accessoryFiles/SSDS/hotspots"
	blacklist = "${baseDir}/accessoryFiles/SSDS/blacklist/mm10/blackList.bed"
	genome2screen = ['mm10','hg19','dm6','hg38','sacCer2','sacCer3']
}

// PROFILES PARAMETERS
profiles {
  conda {
    process.conda = "${baseDir}/conda_yml/environment.yml"
    conda.createTimeout = '5 h'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = '-B "$PWD" -B /home -B "$SCRATCH" -B "$DATAWORK"'
    process {
        beforeScript = ". /etc/profile.d/modules.sh && module load singularity/3.4.1"
        withLabel : python {
            container = "${baseDir}/containers/python-3.8/python-3.8.sif"
        }
        withLabel : trimming {
            container = "${baseDir}/containers/trimming-box-1.0/trimming-box_1.0.sif"
        }
        withLabel : bam {
            container = "${baseDir}/containers/bam-box-1.0/bam-box_1.0.sif"
        }
    }
  }
}

//NEXTFLOW REPORT PARAMETERS
report {
   enabled = true
   file = "${params.outdir}/nxfReports/report.html"
}
 
timeline {
    enabled = true
    file = "${params.outdir}/nxfReports/timeline.html"
}

trace {
   enabled = true
   file = "${params.outdir}/nxfReports/trace.txt"
}

manifest {
   name = 'SSDS nextflow pipeline'
   author = 'Kevin Brick (original pipelines SSDSnextflowPipeline and callSSDSpeaks) and Pauline Auffret for the adaptation'
   homePage = 'https://github.com/kevbrick/SSDSnextflowPipeline ; https://github.com/kevbrick/callSSDSpeaks ; and https://gitlab.igh.cnrs.fr/pauline.auffret/ssdsnextflowpipeline'
   description = 'Single-Stranded-DNA-Sequencing (SSDS) Pipeline : Align, Parse and call Peaks from ssDNA.  2012: Kevin Brick / 2020: IGH adaptation Pauline Auffret'
   mainScript = 'main.nf'
   nextflowVersion = '>=20.04.1'
   version = '2.0'
}

dag {
   enabled = true
   file = "${params.outdir}/nxfReports/dag.png"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

