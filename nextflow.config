// ---------------------------------------------- //
// SSDS Nextflow pipeline default config file     //
// ---------------------------------------------- //
// Load resources configuration
includeConfig 'conf/resources.config'

// Default config options for all environments.

params {
	//PIPELINE DEPENDANCIES
	name = "SSDSnextflowPipeline"
        logo = "${baseDir}/assets/logo/sebimer.png"
	inputcsv = "${baseDir}/tests/fastq/input.csv"
	outdir = "${baseDir}/${params.name}.outdir/02_results"
	src = "${baseDir}/bin"
	chrsize = "${baseDir}/data/mm10/mm10.chrom.sizes"
	trimmomatic_adapters = "${baseDir}/data/TruSeq2-PE.fa"
	multiqc_configfile = "${baseDir}/conf/multiqc_config.yaml"
	custom_bwa = "${baseDir}/bin/bwa_0.7.12"
	custom_bwa_ra = "${baseDir}/bin/bwa_ra_0.7.12"
	hotspots = "${baseDir}/data/hotspots"
	//blacklist = "${baseDir}/data/blacklist/mm10/blackList.bed"
        blacklist = "None"
	genome2screen = ['mm10','hg38']
}

// PROFILES PARAMETERS
profiles {
  conda {
    conda.createTimeout = '5 h'
    process {        
        withLabel : python {
            conda = "${baseDir}/containers/python-3.8/environment.yml"
        }
        withLabel : trimming {
            conda = "${baseDir}/containers/trimming-box-1.0/environment.yml"
        }
        withLabel : bam {
            conda = "${baseDir}/containers/bam-box-1.0/environment.yml"
        }
        withLabel : bigwig {
            conda = "${baseDir}/containers/bigwig-box-1.0/environment.yml"
        }
        withLabel : peakcalling {
            conda = "${baseDir}/containers/peak-calling-box-1.0/environment.yml"
        }
        withLabel : idr {
            conda = "${baseDir}/containers/idr-box-1.0/environment.yml"
        }
        withLabel : plot {
            conda = "${baseDir}/containers/plot-box-1.0/environment.yml"
        }
        withLabel : frip {
            conda = "${baseDir}/containers/frip-box-1.0/environment.yml"
        }
        withLabel : ssds {
            conda = "${baseDir}/containers/ssds-qc-box-1.0/environment.yml"
        }
        withLabel : multiqc {
            conda = "${baseDir}/containers/multiqc-box-1.0/environment.yml"
        }
     } 
  }
  mamba {
    useMamba = true
    conda.createTimeout = '5 h'
    process {
        withLabel : python {
            conda = "${baseDir}/containers/python-3.8/environment.yml"
        }
        withLabel : trimming {
            conda = "${baseDir}/containers/trimming-box-1.0/environment.yml"
        }
        withLabel : bam {
            conda = "${baseDir}/containers/bam-box-1.0/environment.yml"
        }
        withLabel : bigwig {
            conda = "${baseDir}/containers/bigwig-box-1.0/environment.yml"
        }
        withLabel : peakcalling {
            conda = "${baseDir}/containers/peak-calling-box-1.0/environment.yml"
        }
        withLabel : idr {
            conda = "${baseDir}/containers/idr-box-1.0/environment.yml"
        }
        withLabel : plot {
            conda = "${baseDir}/containers/plot-box-1.0/environment.yml"
        }
        withLabel : frip {
            conda = "${baseDir}/containers/frip-box-1.0/environment.yml"
        }
        withLabel : ssds {
            conda = "${baseDir}/containers/ssds-qc-box-1.0/environment.yml"
        }
        withLabel : multiqc {
            conda = "${baseDir}/containers/multiqc-box-1.0/environment.yml"
        }
     }
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    process {
        withLabel : python {
            container = "${baseDir}/containers/python-3.8/python-3.8.sif"
        }
        withLabel : trimming {
            container = "${baseDir}/containers/trimming-box-1.0/trimming-box_1.0.sif"
        }
        withLabel : bam {
            container = "${baseDir}/containers/bam-box-1.0/bam-box_1.0.sif"
        }
        withLabel : bigwig {
            container = "${baseDir}/containers/bigwig-box-1.0/bigwig-box-1.0.sif"
        }
        withLabel : peakcalling {
            container = "${baseDir}/containers/peak-calling-box-1.0/peak-calling-box_1.0.sif"
        }
        withLabel : idr {
            container = "${baseDir}/containers/idr-box-1.0/idr-box_1.0.sif"
        }
        withLabel : plot {
            container = "${baseDir}/containers/plot-box-1.0/plot-box_1.0.sif"
        }
        withLabel : frip {
            container = "${baseDir}/containers/frip-box-1.0/frip-box_1.0.sif"
        }
        withLabel : ssds {
            container = "${baseDir}/containers/ssds-qc-box-1.0/ssds-qc-box_1.0.sif"
        }
        withLabel : multiqc {
            container = "${baseDir}/containers/multiqc-box-1.0/multiqc-box_1.0.sif"
        }
    }
  }
  docker {
    docker.enabled = true
    process {
       withLabel : python {
           container = "python:3.8-bullseye"
       }
       withLabel : trimming {
           container = "pauffret/trimming-box:1.0"
       }
       withLabel : bam {
           container = "pauffret/bam-box:1.0"
       }
       withLabel : bigwig {
           container = "pauffret/bigwig-box:1.0"
       }
       withLabel : peakcalling {
           container = "pauffret/peak-calling-box:1.0"
       }
       withLabel : idr {
           container = "pauffret/idr-box:1.0"
       }
       withLabel : plot {
           container = "pauffret/plot-box:1.0"
       }
       withLabel : frip {
           container = "pauffret/frip-box:1.0"
       }
       withLabel : ssds {
           container = "pauffret/ssds-qc-box:1.0"
       }
       withLabel : multiqc {
           container = "pauffret/multiqc-box:1.0"
       }
    }
  }
}

//NEXTFLOW REPORT PARAMETERS
report {
    enabled = true
    overwrite = true
    file = "${params.outdir}/00_reports/report.html"
}
 
timeline {
    enabled = true
    overwrite = true
    file = "${params.outdir}/00_reports/timeline.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${params.outdir}/00_reports/trace.txt"
}

dag {
   enabled = true
   overwrite = true
   file = "${params.outdir}/00_reports/dag.png"
}

manifest {
   name = 'SSDS nextflow pipeline'
   author = 'Pauline Auffret, adapted from Kevin Brick (original pipelines SSDSnextflowPipeline and callSSDSpeaks)'
   homePage = 'https://github.com/jajclement/ssdsnextflowpipeline'
   description = 'Single-Stranded-DNA-Sequencing (SSDS) Pipeline : Align, Parse and call Peaks from ssDNA.  2012: Kevin Brick / 2020: adaptation Pauline Auffret'
   mainScript = 'main.nf'
   nextflowVersion = '=20.10.0'
   version = '2.0'
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

