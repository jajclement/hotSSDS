includeConfig 'resources.config'
includeConfig '../nextflow.config'


// DEFAULT CLUSTER CONFIGURATION
// Cluster description
params {
  config_profile_description = ''
  config_profile_contact = ''
  config_profile_url = ''
}

// Executor (cluster scheduler) parameters
executor {
    //check in nextflow documentation the scheduler name to match your cluster scheduler system
    name = ''
    // according to your scheduler, adjust the exit time out (need to be high for pbspro)
    exitReadTimeout = '1440min'
}

// Computing queues parameters
process {
    //default queue
    queue = { task.label.contains('gpu') ? 'qgpu' : task.cpus > 1 ? 'qone' : task.label && task.label.contains('internet_access') ? 'qftp' : 'qdefault' }
    //clusterOptions can be used to add some native specifications not available in the standard parameters
    clusterOptions = '-m n -S /bin/bash'
}

// Max resources
params {
  max_memory = 500.GB
  max_cpus = 56
  max_time = 720.h
}

// PROFILES SPECIFIC PARAMETERS
profiles {
  conda {
    conda.createTimeout = '5 h'
    conda.cacheDir = "$DATAWORK/.conda"
    process {
        beforeScript = "module load conda"
    }
  }
  mamba {
    conda.createTimeout = '5 h'
    conda.cacheDir = "$DATAWORK/.conda"
    process {
        beforeScript = "module load mamba"
    }
  }
  singularity {
    singularity.cacheDir = "$DATAWORK/.singularity"
    singularity.runOptions = '-B "$SCRATCH" -B "$DATAWORK"'
    process {
        beforeScript = "module load singularity/3.4.1"
    }
  }
  docker {
    process {
        beforeScript = "module load docker/20.10.14"
    }
  }
}
 

// GENOMES LOCATION
params {
    genomebase = ""
    genomes {
        'Ssal' {
            genomedir           = "${genomebase}/Salmo_salar/ICSASG_v2"
            genome_fasta        = "${genomebase}/Salmo_salar/ICSASG_v2/GCA_000233375.4_genomic.fna"
            genome_name         = "Ssal"
            fai                 = "${genomebase}/Salmo_salar/ICSASG_v2/GCA_000233375.4_genomic.fna.fai"
        }
        'hg38' {
            genomedir           = "${genomebase}/Homo_sapiens/GRCh38.p14"
            genome_fasta        = "${genomebase}/Homo_sapiens/GRCh38.p14/GCF_000001405.40_genomic.fna"
            genome_name         = "hg38"
            fai                 = "${genomebase}/Homo_sapiens/GRCh38.p14/GCF_000001405.40_genomic.fna.fai"
        }
        'mm10' {
            genomedir           = "${genomebase}/Mus_musculus/mm10"
            genome_fasta        = "${genomebase}/Mus_musculus/mm10/genome.fa"
            genome_name         = "mm10"
            fai                 = "${genomebase}/Mus_musculus/mm10/genome.fa.fai"
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

