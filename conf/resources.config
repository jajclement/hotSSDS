/*
 * -------------------------------------------------
 *  Nextflow config file for processes resources
 * -------------------------------------------------
 * Defines resources for all processes
 */

process {
    // Capture exit codes from upstream processes when piping
    shell = ['/usr/bin/env bash', '-euo', 'pipefail']

    // default for all tasks
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.m * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    //PROCESSES SPECIFIC RESSOURCES REQUIREMENTS
        withLabel:process_basic {
                cpus = 1
                memory = 4.GB
                time = { 6.hour * task.attempt }
        }
        withLabel:process_low {
                cpus = 2
                memory = 10.GB
                time = { 24.hour * task.attempt }
        }
        withLabel:process_medium {
                cpus = 4
                memory = 16.GB
                time = { 96.hour * task.attempt }
        }
        withLabel:process_high {
                cpus = 6
                memory = 32.GB
                time = { 120.hour * task.attempt }
        }
        withLabel:process_long {
                cpus = 4
                memory = 16.GB
                time = { 196.hour * task.attempt }
        }
        withName:check_design {
                errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        }
        withName:makeScreenConfigFile {
                errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        }
        withName:bwaAlign {
                cpus = 16
                memory = 32.GB
                time = { 196.hour * task.attempt }
                errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        }
        withName:parseITRs {
                errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        }
}


